// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package raw

import (
	"context"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (email_id, first_name, last_name, status)
VALUES ($1, $2, $3, $4)
RETURNING id, email_id, first_name, last_name, status, created_at, last_updated_at
`

type AddUserParams struct {
	EmailID   string   `json:"emailId"`
	FirstName string   `json:"firstName"`
	LastName  string   `json:"lastName"`
	Status    UserType `json:"status"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.queryRow(ctx, q.addUserStmt, addUser,
		arg.EmailID,
		arg.FirstName,
		arg.LastName,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.EmailID,
		&i.FirstName,
		&i.LastName,
		&i.Status,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email_id, first_name, last_name, status, created_at, last_updated_at
FROM users
WHERE email_id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, emailID string) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, emailID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.EmailID,
		&i.FirstName,
		&i.LastName,
		&i.Status,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email_id, first_name, last_name, status, created_at, last_updated_at
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserByIdStmt, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.EmailID,
		&i.FirstName,
		&i.LastName,
		&i.Status,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

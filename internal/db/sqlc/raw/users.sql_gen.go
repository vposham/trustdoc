// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package raw

import (
	"context"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (user_id, first_name, last_name, is_active)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, first_name, last_name, is_active, created_at, last_updated_at
`

type AddUserParams struct {
	UserID    string `json:"userId"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	IsActive  bool   `json:"isActive"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.queryRow(ctx, q.addUserStmt, addUser,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, user_id, first_name, last_name, is_active, created_at, last_updated_at
FROM users
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID string) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: documents.sql

package raw

import (
	"context"
	"database/sql"
)

const addDoc = `-- name: AddDoc :one
INSERT INTO documents (doc_id, title, description, file_name, uploaded_by, blockchain_hash)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, doc_id, title, description, file_name, blockchain_hash, uploaded_by, modified_at, uploaded_at, last_updated_at
`

type AddDocParams struct {
	DocID          string         `json:"docId"`
	Title          string         `json:"title"`
	Description    sql.NullString `json:"description"`
	FileName       string         `json:"fileName"`
	UploadedBy     int64          `json:"uploadedBy"`
	BlockchainHash string         `json:"blockchainHash"`
}

func (q *Queries) AddDoc(ctx context.Context, arg AddDocParams) (Document, error) {
	row := q.queryRow(ctx, q.addDocStmt, addDoc,
		arg.DocID,
		arg.Title,
		arg.Description,
		arg.FileName,
		arg.UploadedBy,
		arg.BlockchainHash,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.DocID,
		&i.Title,
		&i.Description,
		&i.FileName,
		&i.BlockchainHash,
		&i.UploadedBy,
		&i.ModifiedAt,
		&i.UploadedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const getDoc = `-- name: GetDoc :one
SELECT id, doc_id, title, description, file_name, blockchain_hash, uploaded_by, modified_at, uploaded_at, last_updated_at
FROM documents
WHERE doc_id = $1
LIMIT 1
`

func (q *Queries) GetDoc(ctx context.Context, docID string) (Document, error) {
	row := q.queryRow(ctx, q.getDocStmt, getDoc, docID)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.DocID,
		&i.Title,
		&i.Description,
		&i.FileName,
		&i.BlockchainHash,
		&i.UploadedBy,
		&i.ModifiedAt,
		&i.UploadedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}
